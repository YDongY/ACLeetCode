'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/LeetCode/notes/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/','title':"初级算法",'section':"Notes",'content':"初级算法 #  "});index.add({'id':1,'href':'/LeetCode/notes/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/array/','title':"数组",'section':"初级算法",'content':"数组 #  "});index.add({'id':2,'href':'/LeetCode/notes/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/array/01_%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/','title':"01 删除排序数组中的重复项",'section':"数组",'content':"1. 删除排序数组中的重复项 #   给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组 并在使用 O(1) 额外空间的条件下完成。\n示例 1:\n给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。 示例 2:\n给定 nums = [0,0,1,1,1,2,2,3,3,4], 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 你不需要考虑数组中超出新长度后面的元素。 "});})();